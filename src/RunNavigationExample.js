/**
 * 应用导航页面
 * Generated by Jianrun Zhao
 *Changed by Jianrun Zhao
 */

'use strict';
import React from "react";
import ReactNative from 'react-native';
const {
    NavigationExperimental,
    StyleSheet
} = ReactNative;

const {
    CardStack: NavigationCardStack,
    StateUtils: NavigationStateUtils,
} = NavigationExperimental;

import {InjectionMapping} from "./InjectionComponents";

/**
 * 已经注册的组件
 * @type {InjectionMapping}
 */
let InjectionComponents=new InjectionMapping();
/**
 *橙车app应用
 */
class ChengCheApplication extends React.Component {
    constructor(props, context) {
        super(props, context);

        this.state = {
            navigationState: {
                index: 0,
                routes: [{key: "Home",pushData:"初始首页推入内容"}], // starts with only one route.
            },
        };

        this._exit = this._exit.bind(this);
        this._onNavigationChange = this._onNavigationChange.bind(this);
    }

    render(): React.Element {
        return (
            <ChengCheNavigator
                navigationState={this.state.navigationState}
                onNavigationChange={this._onNavigationChange}
                onExit={this._exit}
            />
        );
    }

    /**
     *导航操作
     * @param type 导航类型
     * @param operationKey 添加或导航到的场景的key
     * @private
     */
    _onNavigationChange(type: string,operationKey:string,transferedData:any): void {
        let {navigationState} = this.state;
        let routes = navigationState.routes;
        let transData=transferedData==null?"":transferedData;
        switch (type) {
            case 'push':
                let route = {key: operationKey,pushData:transData};
                console.info("navigationState:", navigationState);
                let index = routes.findIndex(r=>r.key == route.key);
                if (index >= 0) {
                    console.warn("已经存在相同key的路由，key为：",route.key);
                    break;
                }
                navigationState = NavigationStateUtils.push(navigationState, route);
                break;
            case 'pop':
                navigationState = NavigationStateUtils.pop(navigationState);

                let lastPopIndex = routes.length - 2;
                let currentIndex=routes.length-1;
                let currentKey=routes[currentIndex].key;
                console.info("currentPopKey:",currentKey);
                break;
                routes[lastPopIndex]["popData"]=transData;
                break;
            case "backto"://回退到指定key的页面。                //先判断是否有该scene
                let indexIn = routes.findIndex(r=>r.key == operationKey);
                if (indexIn < 0) {
                    console.warn("该页面不存在。");
                    break;
                }
                let lastIndex = routes.length - 1;
                let lastKey = routes[lastIndex].key;

                while(lastKey!=operationKey){
                    navigationState = NavigationStateUtils.pop(navigationState);
                    routes=navigationState.routes;
                    lastIndex = routes.length - 1;
                    lastKey = routes[lastIndex].key;
                }
                console.warn("last Index in backTo",lastIndex);
                routes[lastIndex]["backToData"]=transData;
                break;
        }
        if (this.state.navigationState !== navigationState) {
            this.setState({navigationState});
        }
    }
    _exit(): void {
        this.props.onExampleExit && this.props.onExampleExit();
    }
    handleBackAction(): boolean {
        return this._onNavigationChange('pop');
    }
}

/**
 *导航器
 *  @type {null}
 */
let Navigator=null;

class ChengCheNavigator extends React.Component {

    constructor(props: any, context: any) {
        super(props, context);
        this._renderScene = this._renderScene.bind(this);
    }
    componentDidMount(){
        Navigator=this;
    }
    onPopRoute(transferedData){
        let tsData=transferedData==null?"":transferedData;
        Navigator.props.onNavigationChange("pop",this,tsData);
    }
    onBackRoute(transferedData){//返回到指定的场景
        let backToData=transferedData==null?"":transferedData;
        Navigator.props.onNavigationChange("backto",this,backToData);
    }
    onPushRoute(transferedData){
        let pushData=transferedData==null?"":transferedData;
        Navigator.props.onNavigationChange("push",this,pushData);
    }

    // Now use the `NavigationCardStack` to render the scenes.
    render(): React.Element {
        return (
            <NavigationCardStack
                onNavigateBack={this.onPopRoute}
                navigationState={this.props.navigationState}
                renderScene={this._renderScene}
                style={styles.navigator}
            />
        );
    }

    /**
     * 为路由渲染场景
     * @param sceneProps
     * @returns {XML}
     * @private
     */
    _renderScene(sceneProps: Object): React.Element {
        return (
            <RenderScene
                route={sceneProps.scene.route}
                onPushRoute={this.onPushRoute}
                onPopRoute={this.onPopRoute}
                onBackRoute={this.onBackRoute}
                onExit={this.props.onExit}
            />
        );
    }
}

/**
 *渲染场景
 */
class RenderScene extends React.Component {
    constructor(props: any, context: any) {
        super(props, context);
    }
    render() {
        let renderRoute=this.props.route;
        let key = renderRoute.key;
        let pushData=renderRoute.pushData;
        let popData=renderRoute.popData;
        let backToData=renderRoute.backToData;

        let RenderPage = InjectionComponents[key];
        return (
            <RenderPage
                pushData={pushData}
                popData={popData}
                backToData={backToData}
                onPushRoute={this.props.onPushRoute}
                onPopRoute={this.props.onPopRoute}
                onBackRoute={this.props.onBackRoute}
            />
        );
    }
}
const styles = StyleSheet.create({
    navigator: {
        flex: 1,
    },
});

module.exports = ChengCheApplication;
